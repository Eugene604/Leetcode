/**
 * @param {number[]} deck
 * @return {number[]}
 */
var deckRevealedIncreasing = function(deck) {
	deck.sort((a, b) => a - b);
	
	/**
	 * Recursively divides the input deck into two halves and interleaves them based on the isFirstReveal flag.
	 * @param {number[]} inputDeck - The input deck to be shuffled.
	 * @param {boolean} isFirstReveal - A flag indicating whether the first card is to be revealed or not.
	 * @returns {number[]} - The shuffled deck.
	 */
	let shuffle = function(inputDeck, isFirstReveal) {		
		
		//base case 
		if (inputDeck.length < 2) {
			return inputDeck;
		}//fi
		let cutoffInx = inputDeck.length/2;
		let firstHalf, secondHalf;
		let outputDeck = new Array();
		let i;
		let isOdd = inputDeck.length%2 === 1;
		
		//console.log('deck: ' + inputDeck);

		if (isOdd) {			
			if (isFirstReveal) {
				//console.log('isOdd true, isFirstReveal true');
				firstHalf = inputDeck.slice(0, cutoffInx + 1);
				secondHalf = shuffle(inputDeck.slice(cutoffInx + 1), !isFirstReveal);
				for (i=0; i < cutoffInx; i++){
					outputDeck.push(firstHalf[i]);		
					outputDeck.push(secondHalf[i]);							
				}//rof
			} else {
				//console.log('isOdd true, isFirstReveal false');
				firstHalf = inputDeck.slice(0, cutoffInx);
				secondHalf = shuffle(inputDeck.slice(cutoffInx), !isFirstReveal);
				for (i=0; i < cutoffInx; i++){
					outputDeck.push(secondHalf[i]);
					outputDeck.push(firstHalf[i]);				
				}//rof
			}//fi

		} else {
			firstHalf = inputDeck.slice(0, cutoffInx);
			secondHalf = shuffle(inputDeck.slice(cutoffInx), isFirstReveal);
			if (isFirstReveal) {
				//console.log('isOdd false, isFirstReveal true');
				for (i=0; i < cutoffInx; i++){
					outputDeck.push(firstHalf[i]);		
					outputDeck.push(secondHalf[i]);							
				}//rof
			} else {
				//console.log('isOdd false, isFirstReveal false');
				for (i=0; i < cutoffInx; i++){
					outputDeck.push(secondHalf[i]);
					outputDeck.push(firstHalf[i]);				
				}//rof
			}//fi
		}//fi


		while (outputDeck[outputDeck.length-1] === undefined){
			outputDeck.pop();
		}//fi
		
		//console.log('outputDeck: ' + outputDeck);
		return outputDeck;
	}//end method
	let ansDeck = shuffle(deck, true);
	//console.log(ansDeck);
    return ansDeck
};

let deck;

deck = [1,3];
//deck = [1,2,3,4,5];
//deck = [17,13,11,2,3,5,7];
//deck = [6151,2055,8200,2059,2061,4112,8211,8215,4120,6170,26,2076,6171,8227,8233,8235,4139,8238,46,2045,6194,50,52,8242,8250,4154,6203,2109,8255,6210,4163,67,8258,4167,74,4171,2125,6223,80,8274,6231,88,2139,8284,8285,8286,4192,2147,8292,2150,2151,6248,2153,108,109,4208,4210,6263,8312,4215,4217,2167,6268,2181,4230,4240,8341,8343,153,6300,4255,6305,8353,8355,8359,6315,4268,173,4270,4273,4277,4280,8378,189,4288,6338,4292,4295,8391,8393,2251,2252,4303,4306,6355,213,6359,224,225,4323,6376,4330,235,2284,8429,2285,6383,4337,2290,2292,245,6390,2295,6392,2294,6399,6400,2306,6406,4360,4361,6412,4365,4366,4367,4368,272,2322,2323,4372,2325,2327,8472,6425,4379,2333,8478,8481,2340,295,6440,6451,6453,4409,314,8508,6460,6465,8514,4419,8516,2373,2376,4431,6482,2391,6487,4441,2394,2397,4448,2403,356,358,4455,4454,6506,4459,4460,8557,8559,6515,8564,8568,4473,4475,2430,8577,2434,6531,2435,6536,8584,2444,398,8591,2448,4498,2453,4502,6549,8602,412,6557,414,2464,2468,2471,8618,428,4525,8621,8631,440,2492,4542,450,452,2502,2503,8650,2509,6608,8659,2516,2517,2521,474,8668,2527,4581,4584,4585,2537,4586,8684,4588,2536,8687,8692,6645,501,6648,4600,4602,505,8696,2554,2558,8703,514,8706,8710,2570,4623,2576,8719,4626,6675,4625,6680,8729,538,2587,2589,542,544,2594,6696,6697,555,6705,8757,566,8761,4666,571,8769,6728,6730,6732,8782,8783,4687,6738,8788,4694,599,8795,4702,8798,4707,615,8811,4716,2669,8813,6767,6769,8819,628,2675,627,633,634,4731,8827,2682,4733,640,8832,6788,6789,4741,6793,649,8841,8846,6799,657,6802,4755,2705,661,4759,6808,2713,666,4765,670,6814,4766,6817,2718,6825,8874,8875,2733,6830,4784,688,4788,693,694,6843,699,4799,2752,6848,2754,4800,2753,8895,8899,2761,8906,4811,2766,8913,4819,8915,726,4827,732,6878,4832,4834,6886,8934,744,6889,745,2795,6893,8942,8944,4848,6898,755,6897,4857,6910,4863,8962,4867,8964,2823,6920,2824,8969,6924,6927,6928,2836,4887,4894,798,8991,6944,8993,2858,2862,9008,6961,2865,2864,4916,6965,2871,6968,9018,2875,6973,831,4928,4930,2882,4938,853,7000,2905,9049,7003,857,863,7007,9060,2918,9067,4974,2928,4977,4978,2931,888,4985,4989,2944,9089,4992,899,7044,9088,898,5004,5006,5009,9108,9114,2971,5025,9122,7077,9126,2983,7078,9129,5029,7084,5037,5039,7091,948,9139,3002,9148,957,9152,5062,3016,9160,5072,9175,7127,5081,7130,9179,988,992,9185,7143,3048,7144,3051,9196,9195,5102,7149,1008,5109,9205,9207,3061,1018,3070,7167,3075,5124,1029,5126,5127,7175,1033,7173,7190,5142,9241,5146,9243,9242,1053,7193,1055,9247,7201,5152,5160,5161,3114,7210,5164,9261,7214,5165,5168,1074,9269,7222,9273,7227,9282,7242,3148,9298,9304,1112,3167,1120,9313,7266,1121,9314,3173,3172,1128,7274,7275,3178,3181,5228,3183,5231,9322,3187,1139,1143,9339,1148,7293,3198,5246,5248,5249,3202,1155,9348,1157,5253,1150,7303,9353,5260,7309,9360,7312,5268,3220,1174,5269,3227,5277,9375,1186,7338,5291,1197,5294,3247,3248,7346,1202,5300,3253,5302,7350,9397,7354,7355,9404,5309,5311,5312,7364,7365,1220,1222,1224,7369,7370,1229,7376,7377,9427,1238,7383,3295,7395,7396,1254,3305,9451,1264,5360,3314,9459,1266,7416,7417,5369,5372,9469,7423,5375,7428,7429,3334,7431,5386,9483,1293,3342,1295,9488,1298,3346,9490,3350,1304,7449,9497,7451,7452,9503,9505,7459,1320,9514,1326,3381,5430,3385,3386,5433,7482,1343,3392,5441,1345,7491,3397,5451,5464,9561,7514,7517,7523,1383,9577,9579,1388,3436,9586,3443,3449,9596,1405,3459,1414,5515,1423,5521,1427,5524,5529,9629,3488,3490,1443,7587,7586,3492,5543,3497,5550,1455,3504,5560,3514,5563,1469,5566,5565,1472,5569,3522,1475,5572,3519,7623,7625,1482,5581,7640,5593,5596,7645,5601,7651,3556,9699,1511,1514,9714,9719,5626,3578,5628,9723,1537,9730,5635,1544,5641,7688,1548,7693,1553,1554,5653,1559,1562,9757,3613,7711,1572,7719,5672,9769,7724,9772,9774,5681,5684,3644,3645,1597,9791,3655,7754,5708,7756,5710,5711,5712,1617,1612,3667,1622,7768,3673,5722,1626,5724,7770,7776,3680,5732,7781,1637,9831,9833,3691,9839,5744,3699,9845,3702,1655,5753,1658,9849,9855,1664,9863,1672,7816,9864,1676,7822,5775,5776,1681,5782,7837,3744,9891,5796,3749,1699,7847,3752,3751,9893,3748,9900,3753,9902,5811,3764,7862,7867,5821,3776,1733,9928,9929,3785,7881,1736,3789,9933,7885,5837,9935,9938,9934,7891,7896,9951,1760,7904,3810,5858,9952,9953,9954,3815,5864,1769,3823,5872,1779,3829,1784,7929,9979,5884,9981,5887,3844,9997,5904,7953,5913,7962,3873,1826,5922,7970,1829,7978,3883,7981,3887,5935,5939,7988,1848,7994,1854,5952,3904,8002,1865,1867,1871,5968,1872,5967,5970,5974,8025,1883,8028,1885,5982,8031,8033,8038,1894,5995,1900,3947,1902,5998,3954,1909,6008,8058,1920,6018,1922,8068,1926,6023,1929,1931,1935,3985,1938,8082,3989,6039,1944,3993,8093,3998,6051,1958,8108,6061,4013,1967,1968,8114,4018,4020,4022,8120,1977,8123,6075,4031,8128,6082,1990,6088,8142,2004,8148,6102,8154,4065,6114,8164,2027,8172,8174,2032,4083,2038,8185,2043,6141,2047];
console.log('ans: ' + deckRevealedIncreasing(deck));
console.log('correct ans: ' + correctDeckRevealedIncreasing(deck));


/**
 * @param {number[]} deck
 * @return {number[]}
 */
function correctDeckRevealedIncreasing(deck) {

    let stack = deck.sort((a, b) => b - a);
    let queue = [stack.shift()];
    console.log(queue);
    while (stack.length > 0) {
        queue.unshift(queue.pop());
        queue.unshift(stack.shift());
    }
    return queue;
};