package Problems;

import java.util.*;
import java.util.Map.Entry;


public class Prob1838 {
	public static int[] arr1 = {1,2,4};
	public static int[] arr2 = {1,4,8,13};
	public static int[] arr3 = {3,9,6};
	public static int[] arr4 = {9926,9960,10000,9992,9917,9986,9934,9985,9977,9950,9922,9913,9971,9978,9984,9959,9934,9948,9918,9916,9967,9965,9985,9977,9988,9983,9900,9945,9913,9966,9968,9986,9939,9914,9980,9957,9921,9927,9917,9972,9974,9953,9984,9912,9975,9920,9966,9932,9921,9904,9928,9959,9993,9937,9934,9974,9937,9964,9922,9963,9991,9930,9944,9930,9982,9980,9967,9904,9955,9947,9924,9973,9997,9950,9905,9924,9990,9947,9953,9924,9977,9938,9951,9982,9932,9926,9928,9912,9917,9929,9924,9921,9987,9910,9927,9921,9929,9937,9919,9995,9949,9953};
	
	public static int[] arr7 = {99557,99360,99077,99472,99379,99738,99792,99355,99228,99209,99532,99668,99471,99278,99116,99368,99867,99296,99127,99465,99093,99191,99475,99791,99061,99257,99837,99693,99641,99332,99759,99427,99719,99013,99697,99501,99309,99839,99896,99701,99001,99093,99306,99848,99197,99132,99613,99151,99883,99496,99208,99256,99528,99279,99342,99088,99094,99428,99628,99645,99008,99099,99458,99595,99852,99781,99468,99723,99211,99272,99336,99740,99461,99488,99859,99035,99466,99884,99515,99458,99091,99868,99544,99507,99036,99496,99961,99755,99793,99197,99518,99275,99913,99465,99309,99775,99301,99036,99093,99743,99418,99137,99014,99156,99196,99214,99171,99061,99940,99531,99145,99541,99171,99058,99265,99207,99476,99297,99450,99975,99037,99664,99394,99999,99732,99727,99143,99779,99614,99218,99869,99904,99874,99704,99367,99289,99473,99150,99023,99402,99770,99686,99072,99680,99582,99361,99769,99121,99987,99635,99010,99587,99569,99895,99636,99531,99623,99329,99298,99885,99501,99317,99634,99635,99501,99499,99496,99102,99549,99436,99968,99987,99450,99757,99026,99899,99922,99772,99225,99369,99340,99874,99392,99532,99988,99687,99071,99503,99872,99002,99229,99581,99574,99320,99259,99513,99833,99567,99124,99269,99721,99886,99393,99140,99258,99313,99045,99206,99791,99549,99425,99246,99588,99751,99166,99495,99949,99329,99249,99713,99260,99804,99114,99592,99091,99307,99026,99262,99501,99252,99976,99313,99273,99511,99669,99391,99243,99845,99971,99467,99920,99559,99217,99008,99098,99839,99961,99302,99572,99630,99183,99765,99584,99037,99384,99671,99677,99434,99270,99309,99394,99135,99981,99093,99008,99066,99569,99447,99794,99575,99286,99567,99443,99952,99698,99105,99842,99740,99581,99057,99202,99178,99331,99874,99882,99374,99768,99209,99476,99971,99924,99669,99232,99259,99676,99293,99172,99685,99913,99671,99147,99688,99293,99203,99953,99678,99867,99674,99078,99429,99848,99921,99346,99563,99156,99652,99897,99354,99606,99118,99351,99259,99606,99883,99919,99014,99875,99427,99292,99810,99627,99966,99911,99702,99349,99515,99786,99951,99277,99025,99854,99313,99008,99303,99134,99305,99131,99569,99569,99559,99906,99263,99024,99872,99044,99580,99908,99796,99182,99401,99195,99998,99744,99780,99575,99599,99795,99946,99413,99589,99701,99349,99911,99943,99203,99867,99211,99936,99204,99964,99963,99260,99454,99919,99874,99257,99202,99118,99762,99775,99489,99154,99892,99962,99540,99914,99419,99332,99030,99012,99724,99571,99830,99296,99498,99224,99472,99005,99143,99958,99276,99351,99530,99470,99407,99602,99359,99563,99307,99729,99713,99630,99673,99678,99957,99482,99640,99933,99555,99803,99970,99377,99562,99113,99818,99290,99059,99023,99703,99247,99728,99498,99254,99480,99655,99501,99801,99171,99324,99078,99272,99867,99675,99154,99219,99282,99174,99290,99025,99598,99406,99378,99476,99126,99246,99438,99966,99839,99486,99431,99546,99915,99273,99814,99002,99741,99450,99846,99631,99574,99715,99996,99538,99178,99997,99125,99799,99146,99393,99586,99975,99677,99819,99279,99239,99288,99018,99856,99472,99324,99599,99197,99058,99694,99185,99369,99914,99145,99996,99551,99398,99666,99578,99040,99214,99253,99261,99492,99985,99042,99969,99233,99132,99536,99074,99017,99701,99574,99282,99794,99894,99560,99411,99202,99826,99460,99218,99186,99305,99501,99308,99427,99212,99244,99369,99975,99604,99102,99075,99250,99624,99840,99902,99045,99445,99597,99813,99479,99945,99949,99025,99916,99564,99357,99262,99808,99712,99314,99884,99858,99203,99410,99673,99477,99363,99562,99817,99039,99897,99913,99199,99972,99386,99656,99444,99173,99265,99314,99268,99949,99166,99929,99529,99420,99792,99385,99402,99830,99200,99724,99388,99842,99765,99489,99662,99416,99034,99700,99628,99029,99746,99781,99800,99985,99227,99832,99651,99729,99055,99768,99791,99096,99979,99887,99379,99265,99978,99086,99271,99230,99192,99858,99960,99991,99327,99514,99388,99025,99951,99125,99089,99964,99451,99178,99117,99613,99996,99460,99240,99862,99631,99484,99210,99669,99989,99436,99220,99769,99877,99519,99942,99202,99406,99773,99621,99042,99474,99767,99641,99761,99741,99458,99115,99850,99014,99370,99620,99515,99857,99289,99620,99926,99020,99101,99474,99181,99409,99093,99039,99495,99814,99991,99038,99295,99088,99534,99327,99542,99237,99526,99309,99920,99725,99478,99369,99149,99698,99772,99541,99620,99142,99693,99939,99527,99071,99016,99948,99683,99795,99242,99938,99562,99506,99879,99844,99426,99363,99566,99352,99419,99521,99068,99551,99565,99672,99978,99739,99231,99858,99296,99753,99643,99139,99458,99921,99869,99094,99933,99916,99638,99686,99917,99125,99368,99599,99577,99499,99639,99847,99552,99010,99722,99896,99567,99702,99874,99069,99391,99910,99239,99351,99147,99182,99352,99444,99558,99322,99860,99554,99310,99160,99882,99629,99167,99795,99326,99130,99419,99389,99157,99823,99325,99112,99891,99034,99249,99624,99337,99112,99562,99919,99052,99922,99582,99171,99213,99102,99732,99376,99681,99226,99779,99376,99063,99388,99224,99089,99994,99738,99345,99488,99710,99300,99224,99176,99463,99079,99693,99085,99610,99286,99755,99033,99967,99938,99378,99709,99863,99491,99162,99238,99563,99132,99204,99115,99099,99431,99914,99834,99030,99490,99000,99289,99990,99647,99703,99699,99902,99373,99286,99745,99949,99441,99385,99848,99122,99410,99310,99152,99750,99816,99365,99206,99256,99498,99059,99796,99225,99659,99395,99187,99893,99058,99456,99099,99715,99975,99269,99167,99388,99736,99748,99723,100000,99532,99538,99255,99862,99376,99766,99413,99340,99127,99423,99200,99936,99141,99697,99758,99589,99572,99115,99009,99702,99288,99248,99356,99675,99636,99563,99121,99750,99988,99597,99729,99464,99260,99293,99815,99268,99744,99037,99475,99850,99050,99456,99580,99804,99845,99522,99454,99154,99557,99159,99613,99577,99461,99608,99164,99340,99310,99922,99647,99392,99059,99829,99913,99653,99632,99593,99510,99799,99404,99297,99702,99893,99359,99454,99884,99834,99698,99041,99398,99171,99825,99512,99586,99188,99675,99528,99744,99069,99294,99079,99223,99597,99520,99478,99222,99561,99436,99627,99056,99648,99794,99850,99502,99381,99958,99383,99277,99176,99890,99405,99526,99626,99935,99798,99722,99928,99993,99354,99466,99390,99331,99823};
	

	
	public static void main(String[] args) {
		Solution1838 solObj;
		int[] arr;
		int k;
		int sol;
		
	/*
		k = 5;
		arr = arr1;
		solObj = new Solution1838();
		sol = solObj.maxFrequency(arr,k);
		System.out.println("sol: " + sol);
		
		k = 5;
		arr = arr2;
		solObj = new Solution1838();
		sol = solObj.maxFrequency(arr,k);
		System.out.println("sol: " + sol);
		
		k = 2;
		arr = arr3;
		solObj = new Solution1838();
		sol = solObj.maxFrequency(arr,k);
		System.out.println("sol: " + sol);
		
		
		k = 3044;
		arr = arr4;//82
		solObj = new Solution1838();
		sol = solObj.maxFrequency(arr,k);
		System.out.println("sol: " + sol);
		//*/
		
		
		k = 201;
		arr = arr7;//28
		solObj = new Solution1838();
		sol = solObj.maxFrequency(arr,k);
		System.out.println("sol: " + sol);
	}

}



class Solution1838 {

	private static final int ARRAY_SIZE = 100001;
	private static int[] countAuxArr = new int[ARRAY_SIZE];
	


    public int maxFrequency(int[] nums, int k) {
    	
    	//step 1, populate and set necessary data structures - value count and ordered distinct number list
    	int numOfVals = 0;
    	for (int num:nums) {
    		if (countAuxArr[num]==0) {
    			numOfVals++;
    		}//fi
    		countAuxArr[num]++;
    	}//rof
    	
    	
    	//frequency and gap array, inner array : [value num, value count, diff between current value and the next number that has count]
    	int[][] valFreqArr = new int[numOfVals+1][2];
    	int valArrInx = 1;
    	for (int i=0;i<ARRAY_SIZE; i++) {
    		if (countAuxArr[i]==0) {
    			continue;
    		}//fi
    		valFreqArr[valArrInx][0]=i;
    		valFreqArr[valArrInx][1]=countAuxArr[i];
    		valArrInx++;
    	}//rof

    	//step 2, using slide window approach
    	
    	int currFreq = 0, maxFreq = 0;
    	long requiredK = 0;
    	int lastValInx = 0, numOfLastValUsed = 0, lastValDiff = 0;
    	for (int i=1; i<=numOfVals; i++) {
    		requiredK += currFreq*(valFreqArr[i][0] - valFreqArr[i-1][0]);
    		currFreq += valFreqArr[i][1];
    		lastValDiff = valFreqArr[i][0] - valFreqArr[lastValInx][0];
    		while (requiredK > k) {
    			if (numOfLastValUsed == 0) {
    				lastValInx++;
    				numOfLastValUsed = valFreqArr[lastValInx][1];
    				lastValDiff = valFreqArr[i][0] - valFreqArr[lastValInx][0];
    			}//fi
    			requiredK -= lastValDiff;
    			numOfLastValUsed--;
    			currFreq--;
    		}//end while
    		if (currFreq>maxFreq) {
    			maxFreq = currFreq;
    		}//if    		
    	}//rof
    	
    	//step 3, clean up
    	for (int[] freqGap:valFreqArr) {
    		countAuxArr[freqGap[0]]=0;
    	}//rof
        return maxFreq;
    }//end method
    

}//end class

